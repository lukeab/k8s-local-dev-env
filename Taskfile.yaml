# https://taskfile.dev

version: '3'

dotenv: ['.env']

includes:
  Util:
    taskfile: ./taskfiles/Util.yaml
  baseservices:
    taskfile: ./taskfiles/baseservices.yaml
  argocd: 
    taskfile: ./taskfiles/argocd.yaml
vars: 
  ## TODO : use this vars as a way to error on dependency not found issue
  UPDATE_CA_TRUST_CMD: 
    sh: |
      if command -v update-ca-trust &>/dev/null; then
        echo -n "$(command -v update-ca-trust)"
      elif command -v update-ca-certificates &> /dev/null; then
        echo -n "(command -v update-ca-certificates) -f"
      else
      echo "exit;"
      fi

# env:
#   K3D_VOLUMES_OVERRIDE: /tmp/k3dcluster-volumes
#   K3D_CONFIG_FILE: k3d_config.yaml
#   # with nss-myhostname can use .k3d.localhost  default to: k3d.local.gd so all platforms should work
#   CLUSTER_NAME: localdev
#   LOCAL_DEV_DNS_SUFFIX: "local.gd"
#   OS_CERT_PATH: "/usr/local/share/ca-certificates/cert-manager-localdev-ca.crt"
tasks:
  
  bootstrap:
    desc: Bootstrap a k3d cluster with default services setup

    deps:
      - task: Util:check_availablecommands_dependencies
        vars:
          COMMAND_DEPENDENCIES: "docker k3d kubectl helm openssl certutil"
    cmds:
      - task: Util:continue
        vars:
          MESAGE: "This task will now create a k3d cluster, trusted local CA and base services.\nBe patient, this process can take a while\nContinue?"
      - command -v figlet &>/dev/null && figlet "Starting Local Dev Environment"
      - task: baseservices:create_CA_cert #do this first to prepare the CA and redner the asset for argo to use
      - k3d cluster create --config "${K3D_CONFIG_FILE}"
      - task: Util:wait_for_deployments
        vars:
          NAMESPACE: kube-system
      - task: argocd:setup_argocd
      - task: baseservices:create_app_cert_manager

  teardown:
    desc: Destroy the k3d cluster and cleanup files.

    cmds:
      - task: Util:continue
        vars:
          MESSAGE: "Do you wish to delete the k3d cluster and CA from your system?"
      - k3d cluster delete {{.CLUSTER_NAME}} --trace
      - argocd context {{.CLUSTER_NAME}} --delete || true
      # -f is fresh switch to remove symlinks
      - "[ -f ${OS_CERT_PATH} ] && sudo rm -v ${OS_CERT_PATH} && sudo {{.UPDATE_CA_TRUST_CMD}} || true"
      # list certs with - certutil -L -d sql:$HOME/.pki/nssdb
      # get if the cert exists and delete it if it does
      - certutil -d sql:$HOME/.pki/nssdb -L -n cert-manager-local-dev-ca && certutil -d sql:$HOME/.pki/nssdb -D -n cert-manager-local-dev-ca || true
      - "[ -f argo-k3d-deployments/secret-c\a.yaml ] && rm -v argo-k3d-deployments/secret-ca.yaml || true"
      - cd data && GLOBIGNORE=.gitkeep rm -v * || true

  testenv: 
    cmds:
      - env