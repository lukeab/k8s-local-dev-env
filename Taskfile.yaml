# https://taskfile.dev

version: '3'

dotenv: ['.env']

includes:
  Util:
    taskfile: ./taskfiles/Util.yaml
  baseservices:
    taskfile: ./taskfiles/baseservices.yaml
  argocd: 
    taskfile: ./taskfiles/argocd.yaml
vars: 
  ## TODO : use this vars as a way to error on dependency not found issue
  UPDATE_CA_TRUST_CMD: 
    sh: |
      if command -v update-ca-trust &>/dev/null; then
        echo -n "$(command -v update-ca-trust)"
      elif command -v update-ca-certificates &> /dev/null; then
        echo -n "$(command -v update-ca-certificates) -f"
      else
      echo "exit;"
      fi

tasks:
  
  bootstrap:
    desc: Bootstrap a k3d cluster with default services setup

    deps:
      - task: Util:check_availablecommands_dependencies
        vars:
          COMMAND_DEPENDENCIES: "docker k3d kubectl helm openssl certutil"
    cmds:
      - task: Util:continue
        vars:
          MESAGE: "This task will now create a k3d cluster, trusted local CA and base services.\nBe patient, this process can take a while\nContinue?"
      - MSG="Starting Local Dev Environment"; command -v figlet &>/dev/null && figlet "$MSG" || echo "****\n$MSG\n****\n"
      - task: baseservices:create_CA_cert #do this first to prepare the CA and redner the asset for argo to use
      - k3d cluster create --config "${K3D_CONFIG_FILE}"
      - task: Util:wait_for_deployments
        vars:
          NAMESPACE: kube-system
      - task: argocd:setup_argocd
      - task: baseservices:create_app_cert_manager
      - task: baseservices:create_app_prometheus_stack
      - task: baseservices:create_app_loki_stack
      - task: baseservices:create_app_tempo
      - task: baseservices:create_app_opentelemetry_operator

  teardown:
    desc: Destroy the k3d cluster and cleanup files.

    cmds:
      - task: Util:continue
        vars:
          MESSAGE: "Do you wish to delete the k3d cluster and CA from your system?"
      - k3d cluster delete {{.CLUSTER_NAME}} --trace
      - argocd context {{.CLUSTER_NAME}} --delete || true
      # -f is fresh switch to remove symlinks
      - "[ -f ${OS_CERT_PATH} ] && sudo rm -v ${OS_CERT_PATH} && sudo {{.UPDATE_CA_TRUST_CMD}} || true"
      # list certs with - certutil -L -d sql:$HOME/.pki/nssdb
      # get if the cert exists and delete it if it does
      - certutil -d sql:$HOME/.pki/nssdb -L -n cert-manager-local-dev-ca && certutil -d sql:$HOME/.pki/nssdb -D -n cert-manager-local-dev-ca || true
      - "[ -f argo-k3d-deployments/cert-manager-default-clusterissuer/secret-ca.yaml ] && rm -v argo-k3d-deployments/cert-manager-default-clusterissuer/secret-ca.yaml || true"
      - cd data && GLOBIGNORE=.gitkeep rm -v * || true

  testenv: 
    cmds:
      - env
  
  environment_urls:
    cmds:
      - |
        MSG="Dev Env Links"; command -v figlet &>/dev/null && figlet "$MSG" || echo "****\n$MSG\n****\n"
        echo -n "Argocd:\t $(kubectl get ingress argocd-server -n argocd --output=jsonpath='{.spec.rules[0].host}')\tuser: admin\tpassword: "
        echo "$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)"
        echo "Prometheus:\t $(kubectl get ingress prometheus -n prometheus --output=jsonpath='{.spec.rules[0].host}')"
        echo "Alertmanager:\t $(kubectl get ingress alertmanager -n prometheus --output=jsonpath='{.spec.rules[0].host}')"
        echo "Grafana:\t $(kubectl get ingress grafana -n prometheus --output=jsonpath='{.spec.rules[0].host}')"
        echo ""