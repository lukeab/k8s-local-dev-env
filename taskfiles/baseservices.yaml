# https://taskfile.dev

version: '3'
tasks:
  setup_helm_repos:
    cmds:
      - helm repo add argo https://argoproj.github.io/argo-helm
      - helm repo update argo #+ jetstack,prometheus-community, grafana,...
    internal: true

  setup_argocd:
    deps: [setup_helm_repos]
    cmds:
      - helm upgrade -i -n argocd --create-namespace argocd argo/argo-cd -f helm/argocd/values.yaml --set server.ingress.hosts[0]="argocd.{{.CLUSTER_NAME}}.{{.LOCAL_DEV_DNS_SUFFIX}}",server.ingess.tls[0].hosts[0]="argocd.{{.CLUSTER_NAME}}.{{.LOCAL_DEV_DNS_SUFFIX}}"
      - echo "Helm setep complete"
      ## this looks like it can fail as the secret isn't created yet - might need to visit login page for secret to be created
      - |
        #request argocd page to see if this prompts creating the initial admin password secret
        echo "Waiting for argocd initial password to be created"
        sleep 5
        kubectl get secret -n argocd argocd-initial-admin-secret || true
        while ! kubectl get secret -n argocd argocd-initial-admin-secret >/dev/null 2>&1; do (echo -n "." ; sleep 1); done
        echo
        echo "Login at https://argocd.{{.CLUSTER_NAME}}.{{.LOCAL_DEV_DNS_SUFFIX}} with user admin and password - "
        echo $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
      - task: argocd_cli_login
  
  argocd_cli_login:
    vars:
      ARGO_ADMIN_PASSWORD:
        sh: echo $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
      ARGOCD_SERVER_URL:
        sh: echo "$(kubectl get ingress argocd-server -n argocd --output=jsonpath='{.spec.rules[0].host}')"
    cmds: 
      - |
        echo "Waiting for {{.ARGOCD_SERVER_URL}} endpoint..."
        until curl -kI "https://{{.ARGOCD_SERVER_URL}}" &> /dev/null ; do (echo -n "." ; sleep 1) ; done
        echo
        echo "logging in to {{.ARGOCD_SERVER_URL}} with user: admin password: {{.ARGO_ADMIN_PASSWORD}}"
        until argocd login "{{.ARGOCD_SERVER_URL}}" --insecure --grpc-web --name local-dev --username admin --password "{{.ARGO_ADMIN_PASSWORD}}" &> /dev/null ; do  (echo -n "." ; sleep 1); done
        echo
        echo "argocd cli logged in to {{.ARGOCD_SERVER_URL}} as admin successfully"


  sync_argocd_repo:
    cmds: 
      # TODO add test to verify login endpoint is ready, or timeout retry to makesure login works
      - argocd sync --local --folder
  
  create_CA_cert:
    cmds:
      - |
        echo "##!! Setting up ca certificate for local development and registering it in your current development cluster context"
        echo 
        echo "##!! WARNING: This will install a CA certificate in ${OS_CERT_PATH} and update your certificates trust in your operating system and chrome/chromium!"
        echo 
        [ ! -f "data/ca.key" ] && openssl genrsa -out "data/ca.key" 4096
        [ ! -f "data/ca.crt" ] && openssl req -new -x509 -sha256 --config "helm/cert-manager/config.cnf" -days 10950 -key "data/ca.key" -out "data/ca.crt"
        B64_KEY="$(base64 -w 0 "data/ca.key")"
        B64_CRT="$(base64 -w 0 "data/ca.crt")"
        export B64_KEY B64_CRT
        envsubst < "helm/cert-manager/secret-ca.yaml.tpl" > "data/secret-ca.yaml"
        ## copy secret to argocd deployments directory
        cp "data/secret-ca.yaml" argo-k3d-deployments/
        if [ ! -f "${OS_CERT_PATH}" ]; then
          sudo cp "data/ca.crt" "${OS_CERT_PATH}"
          sudo update-ca-certificates -f
        else
          echo "${OS_CERT_PATH} already setup - skipping cp and update-ca-certificates"
        fi
        certutil -d sql:$HOME/.pki/nssdb -A -t "CT,c,c" -n cert-manager-local-dev-ca -i "data/ca.crt"
        certutil -L -d sql:$HOME/.pki/nssdb
        certutil -d sql:$HOME/.pki/nssdb -L -n cert-manager-local-dev-ca
  
  setup_services:
    cmds:
      - task: setup_argocd
      #- task: sync_argocd_repo
