# https://taskfile.dev

version: '3'

tasks:
  create_all:
    cmds:
      - task: create_app_prometheus_stack
      - task: create_app_cert_manager
      - task: create_app_loki_stack
      - task: create_app_tempo
      - task: create_app_opentelemetry_operator
    silent: true

  create_app_cert_manager: 
    cmds: 
      - argocd app create --upsert cert-manager -f argocd/base-services/cert-manager/cert-manager-app.yaml
      - argocd app wait cert-manager --sync
      - task: :Util:wait_for_deployments
        vars:
          NAMESPACE: cert-manager
      - argocd app create --upsert cert-manager-default-clusterissuer -f argocd/base-services/cert-manager/default-clusterissuer-app.yaml --validate=false --sync-policy none 
      - argocd app sync cert-manager-default-clusterissuer --local argo-k3d-deployments/cert-manager-default-clusterissuer --local-repo-root argo-k3d-deployments
    

  create_app_prometheus_stack:
    cmds:
      - argocd app create --upsert kube-prometheus-stack -f argocd/base-services/prometheus-stack/prometheus-stack.yaml
      - argocd app wait kube-prometheus-stack --sync
      - task: :Util:wait_for_deployments
        vars:
          NAMESPACE: prometheus

  create_app_loki_stack:
    cmds:
      - argocd app create --upsert loki-stack -f argocd/base-services/loki-stack/loki-stack.yaml
      - argocd app wait loki-stack --sync
      - task: :Util:wait_for_deployments
        vars:
          NAMESPACE: loki
  
  create_app_tempo:
    cmds:
      - argocd app create --upsert tempo -f argocd/base-services/tempo/tempo.yaml
      - argocd app wait tempo --sync
      - task: :Util:wait_for_deployments
        vars:
          NAMESPACE: tempo

  create_app_opentelemetry_operator:
    cmds:
      - argocd app create --upsert opentelemetry-operator -f argocd/base-services/opentelemetry-operator/opentelemetry-operator.yaml
      - argocd app wait opentelemetry-operator --sync
      - task: :Util:wait_for_deployments
        vars:
          NAMESPACE: opentelemetry 
      - argocd app create --upsert opentelemetry-collector-instrumentation -f argocd/base-services/opentelemetry-operator/opentelemetry-collector-instrumentation.yaml --validate=false --sync-policy none
      - argocd app sync opentelemetry-collector-instrumentation --local argo-k3d-deployments/collector-instrumentation --local-repo-root argo-k3d-deployments

  create_CA_cert:
    cmds:
      - |
        echo "##!! Setting up ca certificate for local development and registering it in your current development cluster context"
        echo 
        echo "##!! WARNING: This will install a CA certificate in {{.OS_CERT_PATH}}/k8s-{{.CLUSTER_NAME}}-cert-manager-ca.crt and update your certificates trust in your operating system and chrome/chromium!"
        echo 
        [ ! -f "data/ca.key" ] && openssl genrsa -out "data/ca.key" 4096
        [ ! -f "data/ca.crt" ] && openssl req -new -x509 -sha256 --config "helm/cert-manager/config.cnf" -days 10950 -key "data/ca.key" -out "data/ca.crt"
        B64_KEY="$(base64 -w 0 "data/ca.key")"
        B64_CRT="$(base64 -w 0 "data/ca.crt")"
        export B64_KEY B64_CRT
        envsubst < "helm/cert-manager/secret-ca.yaml.tpl" > "argo-k3d-deployments/cert-manager-default-clusterissuer/secret-ca.yaml"
        if [ ! -f "{{.OS_CERT_PATH}}/k8s-{{.CLUSTER_NAME}}-cert-manager-ca.crt" ]; then
          sudo cp "data/ca.crt" "{{.OS_CERT_PATH}}/k8s-{{.CLUSTER_NAME}}-cert-manager-ca.crt"
          sudo {{.UPDATE_CA_TRUST_CMD}}
        else
          echo "{{.OS_CERT_PATH}}/k8s-{{.CLUSTER_NAME}}-cert-manager-ca.crt already setup - skipping cp and {{.UPDATE_CA_TRUST_CMD}}"
        fi
        certutil -d sql:$HOME/.pki/nssdb -A -t "CT,c,c" -n k8s-{{.CLUSTER_NAME}}-cert-manager-ca -i "data/ca.crt"
        certutil -L -d sql:$HOME/.pki/nssdb
        certutil -d sql:$HOME/.pki/nssdb -L -n k8s-{{.CLUSTER_NAME}}-cert-manager-ca
    silent: true